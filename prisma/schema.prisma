generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id   String       @id @default(cuid())        // Primary key
  name      String?
  email     String       @unique                     // Google OAuth email
  image     String?                                   // Profile picture
  username  String?      @unique                     // Custom username
  bio       String?      @db.Text
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  accounts  Account[]
  sessions  Session[]
  posts     Post[]
  comments  Comment[]
  likes     Like[]
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             String                              // FK → User.user_id
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  // Relation
  user               User    @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String                                // FK → User.user_id
  expires      DateTime

  user User    @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         String     @id @default(cuid())
  userId     String                                  // FK → User.user_id
  author     User       @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  title      String
  content    String     @db.Text
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  comments   Comment[]
  likes      Like[]

  @@index([userId, createdAt])
}

model Comment {
  id         String     @id @default(cuid())
  postId     String                                  // FK → Post.id
  userId     String                                  // FK → User.user_id
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  author     User       @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  content    String     @db.Text
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([postId])
  @@index([userId, createdAt])
}

model Like {
  id         String     @id @default(cuid())
  postId     String                                  // FK → Post.id
  userId     String                                  // FK → User.user_id
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  createdAt  DateTime   @default(now())

  @@unique([userId, postId])   // user can like a post only once
  @@index([postId])
}
